(function (exports) {
  'use strict';

  // @TODO: use bliss.js instead
  function $(expr, con) {
    return typeof expr === 'string' ? (con || document).querySelector(expr) : expr || null;
  }

  function $$(expr, con) {
    return Array.prototype.slice.call((con || document).querySelectorAll(expr));
  }

  $.bind = function(elements, o) {
    if (elements) {
      elements = elements.length ? elements : [elements];
      elements.forEach(function (element) {
        for (var event in o) {
          var callback = o[event];
          event.split(/\s+/).forEach(function (event) {
            element.addEventListener(event, callback);
          });
        }
      });
    }
  };
  // END @TODO




  var defaultOptions = {
    disableHistory: false,
    swipe: true,
    classNames: {
      link: 'perfundo__link',
      overlay: 'perfundo__overlay',
      content: 'perfundo__content',
      close: 'perfundo__close',
      prev: 'perfundo__prev',
      next: 'perfundo__next',
      untarget: 'perfundo__untarget',
      active: 'is-active'
    }
  };

  var Perfundo = function Perfundo(element, options) {
    if ( options === void 0 ) options = {};

    var me = this;

    this.element = $(element);
    this.options = options;

    // Return an empty object if the element does not exist.
    if (!this.element) {
      return {};
    }

    this._configure(defaultOptions);

    $.bind($$('.' + this.options.classNames.link, this.element), {
      click: function click(e) {
        if (me.options.disableHistory) {
          e.preventDefault();
        }
        me.open(this.getAttribute('href'));
      }
    });

    $.bind(this.element, {
      click: function click$1(e) {
        if (e.target.classList.contains(me.options.classNames.close) || e.target.classList.contains(me.options.classNames.overlay)) {
          if (me.options.disableHistory) {
            e.preventDefault();
          }
          me.close();
        }
      }
    });

    if (this.options.swipe) {
      // Initialize swipe detection variables.
      var touchStartX = 0;
      var touchStartY = 0;
      var touchEndX = 0;
      var touchEndY = 0;
      // Store the swipe distance.
      var swipeDistanceX;
      var swipeDistanceY;
      // Min X distance to count as horizontal swipe.
      var swipeMinX = 50;
      // Max Y distance to still count as horizontal swipe.
      var swipeMaxY = 60;

      $.bind($$('.' + this.options.classNames.content, this.element), {
        touchstart: function touchstart(e) {
          // Save touchstart coordinates.
          touchStartX = e.changedTouches[0].clientX;
          touchStartY = e.changedTouches[0].clientY;
        },
        touchend: function touchend(e) {
          // Save touchend coordinates.
          touchEndX = e.changedTouches[0].clientX;
          touchEndY = e.changedTouches[0].clientY;
          // Calculate swipe distances.
          swipeDistanceX = touchStartX - touchEndX;
          swipeDistanceY = touchStartY - touchEndY;
          // Check if touch gesture was a swipe.
          if ((Math.abs(swipeDistanceX) >= swipeMinX) && (Math.abs(swipeDistanceY) <= swipeMaxY)) {
            if (swipeDistanceX > swipeMinX) {
              me.next();
            }
            else {
              me.prev();
            }
          }
          // Reset variables to be ready to detect the next swipe.
          touchStartX = 0;
          touchStartY = 0;
          touchEndX = 0;
          touchEndY = 0;
          swipeDistanceX = null;
          swipeDistanceY = null;
        }
      });
    }
  };

  Perfundo.prototype.open = function open(overlayItem) {
    overlayItem = $(overlayItem);
    this.close();
    overlayItem.classList.add(this.options.classNames.active);
  };

  Perfundo.prototype.close = function close() {
      var this$1 = this;

    $$('.' + this.options.classNames.overlay + '.' + this.options.classNames.active, this.element).forEach(function (overlayItem) {
      overlayItem.classList.remove(this$1.options.classNames.active);
    });
  };

  Perfundo.prototype.next = function next() {
    var nextLink = $('.' + this.options.classNames.next, this.element);
    if (nextLink) {
      nextLink.click();
    }
  };

  Perfundo.prototype.prev = function prev() {
    var prevLink = $('.' + this.options.classNames.prev, this.element);
    if (prevLink) {
      prevLink.click();
    }
  };

  /**
   * Private functions.
   */
  Perfundo.prototype._configure = function _configure(defaultOptions) {
      var this$1 = this;

    // @TODO: refactor
    // - should data attributes trump arguments or the other way?
    for (var i in defaultOptions) {
      var initial = defaultOptions[i];
      var attrValue = this$1.element.getAttribute('data-' + i.toLowerCase());

      if (typeof initial === 'number') {
        this$1.options[i] = parseInt(attrValue);
      }
      else if (initial instanceof Function) {
        this$1.options[i] = null;
      }
      else if (attrValue) {
        this$1.options[i] = attrValue;
      }

      if (!this$1.options[i] && this$1.options[i] !== 0) {
        this$1.options[i] = (i in this$1.options) ? this$1.options[i] : initial;
      }
    }
  };

  exports.Perfundo = Perfundo;

}((this.Perfundo = this.Perfundo || {})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,